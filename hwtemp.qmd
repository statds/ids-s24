---
title: "Homework Assignment 2"
author: "Jun Yan"
toc: true
number-sections: true
highlight-style: pygments
format: 
  html: 
    code-fold: true
    html-math-method: katex
  pdf: 
    geometry: 
      - top=30mm
      - left=20mm
##  docx: default
---

# Approximating $\pi$

Let $(X_i, Y_i)$, $i = 1, \ldots, n$, be a random sample drawn form
the bivarate uniform distribution over the unit square. 
The probability that this point falls into the
first quardrant of the unit circle is $\pi / 4$. Based on this, we
can approximate $\pi$ by
\begin{equation*}
  \hat\pi_n = \frac{4 \sum_{i=1}^n I(X_i^2 + Y_i^2 < 1)}{n},
\end{equation*}
for a large sample size $n$.

Let's write a function to do this, which take the sample size as
the input.
```{python}
import random

def approximate_pi(num_points):
    points_inside_circle = 0

    for _ in range(num_points):
        x, y = random.random(), random.random() # Random point in the unit square
        distance = x**2 + y**2  # Distance from the origin

        if distance <= 1:
            points_inside_circle += 1

    # Approximate Pi
    pi_approximation = 4 * points_inside_circle / num_points
    return pi_approximation
```

Let's try this out with 10000 points
```{python}
approximate_pi(10000)  # Using 10,000 points for approximation
```

Recall the central limit theorem, larger sample sizes lead
to smaller approximation errors. 
```{python}
approximate_pi(160000)
```

Here are some questions for you to think about:

+ Do you remember how to calculate the standard errors of your
approximation?
+ Do you remember how to construct a confidence interval for $\pi$, 
pretending you don't know its true value?

The above function works correctly, but it is quite inefficient because it uses loops. With package `NumPy`, we can make it much faster.
```{python}
import numpy as np

def approximate_pi_vectorized(num_points):
    # Generate random points in the unit square
    x, y = np.random.random(num_points), np.random.random(num_points)

    # Vectorized computation of distances from the origin
    distances = x**2 + y**2

    # Count points inside the unit circle
    points_inside_circle = np.sum(distances <= 1)

    # Approximate Pi
    pi_approximation = 4 * points_inside_circle / num_points
    return pi_approximation
```

Let's do a time comparison.
```{python}
import timeit

setup_code = """
import random
import numpy as np

def approximate_pi(num_points):
    points_inside_circle = 0
    for _ in range(num_points):
        x, y = random.random(), random.random()
        distance = x**2 + y**2
        if distance <= 1:
            points_inside_circle += 1
    return 4 * points_inside_circle / num_points

def approximate_pi_vectorized(num_points):
    x, y = np.random.random(num_points), np.random.random(num_points)
    distances = x**2 + y**2
    points_inside_circle = np.sum(distances <= 1)
    return 4 * points_inside_circle / num_points
"""

## poor style
time_original = timeit.timeit("approximate_pi(10000)",               setup=setup_code, number=100)

## good style; watch the pdf output
time_vectorized = timeit.timeit("approximate_pi_vectorized(10000)",
                                setup=setup_code, number=100)

time_original, time_vectorized
```


# Problme 2

Here is your text desctiption.

You can add some code chunks.

Explain your code.  Here is a list:

1. first
1. second
1. third

# Making a release for grading

To keep your repo clean, you don't want to track the generated
pdf or html output. To facilitate grading, however, please 
create a release and upload your pdf output so that my grader
doesn't need to run your code to generate the same output on
his/her computer.
