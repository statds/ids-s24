## Accessing ACS Data

This section was written by Abigail Mori.

### Introduction

Hi! My name is Abigail Mori and I am a current senior, graduating this May. 
This past summer I worked with the UConn's Center for Voting Technology 
Research. We used ACS data to analyze ease of voting within Connecticut. 
Though, I only used `sql` and never had to access this data through `python`. 
I am excited to show what I've learned over the past couple weeks.

### Installation

In order to properly access ACS data we will need make sure we have installed 
`cenpy` and `geodatasets`. `Cenpy` is a package that "automatically discovers 
US Census Bureau API endpoints and exposes them to Python in a consistent 
fashion." `Geodatasets` "contains an API on top of a JSON with metadata of 
externally hosted datasets containing geospatial information useful for 
illustrative and educational purposes." Both of these modules are dependent 
on `pandas`.

### Accessing ACS Data

There are many different kinds of census data, one of which is ACS (American
Community Survery) data. The ACS data is made up of a "wide range of social, 
economic, demographic, and housing charateristics." There are multiple ways 
to access this data using Python. I will examine one way using `cenpy`.

For much of work I referenced a `cenpy` API reference page 
(https://cenpy-devs.github.io/cenpy/api.html)

```{python}
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)
import cenpy as cen
import geodatasets
```

```{python}
# Set a variable to all tables in the The American Community Survey from
#  the Census Bureau
acs = cen.products.ACS()
# Filter through acs tables based on specific variables
print(acs.filter_tables('RACE', by='description'))
# Once you select your desired table you can add more specific parameters, 
# in this case I chose to do so by state
connecticut = cen.products.ACS(2019).from_state('Connecticut',
 variables= 'B02001')
print(connecticut.head())
nevada = cen.products.ACS(2019).from_state('Nevada', 
variables= 'B02001')
print(nevada.head())
```

Each columns meanings can be found here: 
https://api.census.gov/data/2019/acs/acs1/variables.html and 
https://www.census.gov/programs-surveys/acs/technical-documentation
/table-shells.2019.html#list-tab-79594641

|              |                                                              |
|--------------|--------------------------------------------------------------|
| B02001_001E: | Total                                                        |
| B02001_002E  | White alone                                                  |
| B02001_003E  | Black or African American alone                              |
| B02001_004E  | American Indian and Alaska Native alone                      |
| B02001_005E  | Asian alone                                                  |
| B02001_006E  | Native Hawaiian and Other Pacific Islander alone             |
| B02001_007E  | Some other race alone                                        |
| B02001_008E  | Two or more races                                            |
| B02001_009E  | Two races including Some other race                          |
| B02001_010E  | Two races excluding Some other race, and three or more races |

### Visualizing

`Cenpy` returns users with datasets based on specifications, like RACE. Some of 
the columns include: geiod, geometry, name, state, county, and tract. The 
geometry is made up of Polygons which then can be used to make a map with 
`matplotlib` Since, `cenpy` provides a table of type: 
geopandas.geodataframe.GeoDataFrame. `GeoPandas` provides a high-level interface
to the `matplotlib` library for making maps.

Below, I show maps of Connecticut and Nevada which display the populations 
of Native Hawaiians and other Pacific Islanders by census tract.

```{python}
import matplotlib.pyplot as plt
import geopandas
import pandas as pd
```

```{python}
fig, (ax1,ax2) = plt.subplots(nrows=1, ncols=2, 
figsize=(20, 16))

#B02001_006E: total number of Native Hawaiians and other Pacific Islanders
ax1 = connecticut.plot('B02001_006E', ax = ax1, cmap = 'viridis', legend = True)
ax2 = nevada.plot('B02001_006E', ax = ax2, cmap = 'viridis', legend = True)
```

### Further Analysis

ACS data can allow individuals to see discrepancies in voting accessability. 
For instance, we can look at correlation between a poverty level and 
education in a specific state.

We can access this data doing the same search method as above.

Like before we filter through the tables to access our desired data. In this 
instance I chose to select data concerning poverty and education in Connecticut.

```{python}
print(acs.filter_tables('POVERTY', by='description'))
# B17001: Poverty status in the past 12 months 
poverty_ct = cen.products.ACS(2019).from_state('Connecticut', 
variables = 'B17001')
poverty_ct.head()
```

```{python}
print(acs.filter_tables('HOUSING', by = 'description'))
# Total Population in occupied housing
housing_ct = cen.products.ACS(2019).from_state('Connecticut', 
variables = 'B25008')
housing_ct.head()
```

```{python}
fig, (ax1,ax2) = plt.subplots(nrows=1, ncols=2, figsize=(20, 16))

ax1 = poverty_ct.plot('B17001A_001E', ax = ax1, cmap = 'viridis', legend = True)
ax2 = housing_ct.plot('B25008_001E', ax = ax2, cmap = 'viridis', legend = True)
```

Based on this we can visualize the numbers of individuals who are in poverty 
and individuals who have housing by census tract.

A further step is to run statistical analysis to see if there is any dependence
 and correlation between poverty and housing attainment within Connecituct.

### References

https://cenpy-devs.github.io/cenpy/api.html https://pypi.org/project/CensusData/ https://pypi.org/project/cenpy/0.9.1/ https://geopandas.org/en/stable/getting_started/introduction.html https://data.census.gov/table/ACSDT1Y2022.B02001?t=Race+and+Ethnicity https://www.census.gov/programs-surveys/acs/technical-documentation/table-shells.2019.html#list-tab-79594641