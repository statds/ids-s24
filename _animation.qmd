## Animation

Hello everyone! My name is Ge Li and I am a senior double major in Math and Statistics. I am going to do the Animation analysis here with python. 

### Introduction

#### What is data animation?
Data animation is the process of adding movement, interactivity, and visual effects to your data displays. It can help you highlight changes over time, compare different scenarios, reveal hidden details, and create a dynamic and immersive experience for your viewers. Data animation can take many forms, such as animated maps, timelines, transitions, sliders, and interactive dashboards. You can use data animation to enhance your presentations, reports, websites, or social media posts.

#### Why animate your data?
Data animation can provide a variety of advantages to your data analysis and communication. Capturing attention and generating interest is possible by adding color, motion, and sound. It can also improve understanding and retention by showing how complex or abstract concepts work or change over time. Furthermore, data animation can be used to persuade and influence by conveying a message or story with your data and creating emotional impact. It can also motivate action or change by demonstrating consequences, opportunities, or solutions


#### How to animate your data?
Before animating your data, it's important to define your purpose and audience. Consider the main question, problem, or idea you want to address and the best way to communicate it. Then choose the data and format that best suit your purpose and audience. What type of data do you have? How much, how complex, and how reliable is it? What kind of chart, graph, or map will best display it? Finally, decide how to animate and interact with your data. What kind of movement, transition, or effect will you use? How will you control the speed, direction, and duration of the animation? How will you enable user input, feedback, or navigation? By following these steps, you can create an effective animation that meets your goals and resonates with your audience.

### Examples of data animation using NYC Rodents Dataset

#### Data Examination and Queation Exploration

The dataset contains information on rodent complaints across different locations, with a total of 2,669 entries. Each entry includes details such as the unique key, created and closed dates of the complaint, agency and agency name handling the complaint, complaint type, descriptor (specifics about the complaint), location type, incident zip code, address, and additional geographical and administrative details.

Given the nature of this dataset, we can explore several interesting questions and topics for data animation, focusing on trends, patterns, and insights related to rodent complaints. Here are some potential ideas:

Temporal Trends: How have rodent complaints changed over time? We can animate the number of complaints over the months to identify any seasonal patterns or trends.

Geographical Distribution: Which areas have the highest concentration of rodent complaints? An animated heatmap or choropleth map showing the density of complaints across different zip codes or boroughs could provide insights.

Comparison by Location Type: How do rodent complaints vary by location type (e.g., residential vs. commercial buildings)? We can create an animated bar chart that updates over time to show the distribution of complaints by location type.


#### Temporal Trends over time

An animation is a sequence of frames where each frame corresponds to a plot on a Figure.
The animation process in Matplotlib can be thought of in 2 different ways:

FuncAnimation: Generate data for first frame and then modify this data for each frame to create an animated plot.

ArtistAnimation: Generate a list (iterable) of artists that will draw in each frame in the animation.

FuncAnimation is more efficient in terms of speed and memory as it draws an artist once and then modifies it. On the other hand ArtistAnimation is flexible as it allows any iterable of artists to be animated in a sequence.

#### Geographical Distribution

A GeoJSON file for NYC ZIP code boundaries is a dataset that contains geographic information about the boundaries of ZIP code areas in New York City represented in the GeoJSON format. GeoJSON is a format for encoding a variety of geographic data structures, such as points, lines, polygons, and multi-part collections.

GeoJSON files provide spatial data that can be used for various geospatial analyses, such as understanding the distribution of demographic characteristics, economic activities, or public services across different ZIP code areas in New York City.

With the help of libraries like geopandas, folium, or leaflet.js, GeoJSON files can be used to visualize geographic boundaries on maps. For instance, one could create choropleth maps to visualize patterns or densities of certain attributes (like population density, income levels, etc.) across different ZIP code areas.

##### Comparison by Location Type

Folium is a Python library used for visualizing geospatial data interactively. It allows you to create interactive maps directly within your Python environment, making it easy to explore and analyze geographic data. Folium builds on the capabilities of the Leaflet.js library, providing a Python wrapper that simplifies the process of creating maps with various layers and markers.

```python
import pandas as pd

# Load the dataset
df = pd.read_csv('rodent_2022-2023.csv')

# Display the first few rows of the dataframe to understand its structure and content
df.head(), df.info()

```

```python
# Convert 'Created Date' to datetime format and extract the year and month for grouping
df['Created Date'] = pd.to_datetime(df['Created Date'])
df['YearMonth'] = df['Created Date'].dt.to_period('M')

# Aggregate data to count the number of complaints per month
monthly_complaints = df.groupby('YearMonth').size().reset_index(name='Complaints')

# Sort the data by 'YearMonth' to ensure it's in chronological order
monthly_complaints = monthly_complaints.sort_values('YearMonth')

monthly_complaints.head()
```

```python
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from IPython.display import HTML

# Convert 'YearMonth' from Period to string for plotting
monthly_complaints['YearMonthStr'] = monthly_complaints['YearMonth'].astype(str)

# Setting up the figure and axis for the animation, with correction for date formatting
fig, ax = plt.subplots(figsize=(10, 6))
ax.set_ylim(0, monthly_complaints['Complaints'].max() + 10)
ax.set_xlabel('Month')
ax.set_ylabel('Number of Rodent Complaints')
ax.set_title('Monthly Rodent Complaints (2022-2023)')
plt.xticks(rotation=45, ha="right")

# Initialize an empty line plot
line, = ax.plot([], [], lw=2)
ax.set_xlim(0, len(monthly_complaints['YearMonthStr']) - 1)
ax.set_xticks(range(len(monthly_complaints['YearMonthStr'])))
ax.set_xticklabels(monthly_complaints['YearMonthStr'], rotation=45, ha="right")

# Function to update the plot for each frame, with correction for date formatting
def update(num, monthly_complaints, line):
    line.set_data(range(num), monthly_complaints['Complaints'][:num])
    return line,

# Creating the animation, with correction for date formatting
ani = animation.FuncAnimation(fig, update, len(monthly_complaints), fargs=[monthly_complaints, line],
                              interval=500, blit=True)

# Convert the animation to HTML to display it in the notebook, with correction
HTML(ani.to_jshtml())
```

```python
# Convert 'Created Date' to datetime format
df['Created Date'] = pd.to_datetime(df['Created Date'])

# Extract Year and Month for aggregation
df['YearMonth'] = df['Created Date'].dt.to_period('M')

# Aggregate the data: Count the number of complaints per ZIP code and Year-Month
aggregated_data = df.groupby(['Incident Zip', 'YearMonth']).size().reset_index(name='Complaints')

# Check the aggregated data
aggregated_data.head()
```

```python
import json
import plotly.express as px
# Load the geoJSON file for NYC ZIP code boundaries
geojson_path = 'nyc-zip-code-tabulation-areas-polygons.geojson'
with open(geojson_path) as f:
    nyc_geojson = json.load(f)

# Display the first item to understand its structure
next(iter(nyc_geojson['features']))
```

```python
# Prepare the data: Make sure the ZIP codes are in the same format as in the geoJSON
aggregated_data['Incident Zip'] = aggregated_data['Incident Zip'].astype(str)

# Plotly expects the animation_frame column to be string type
aggregated_data['YearMonth'] = aggregated_data['YearMonth'].astype(str)

# Create the choropleth map
fig = px.choropleth(aggregated_data,
                    geojson=nyc_geojson,
                    locations='Incident Zip', # The ZIP code is the feature identifier in the geoJSON
                    featureidkey="properties.postalCode",
                    color='Complaints',
                    animation_frame='YearMonth',
                    color_continuous_scale='Reds',
                    range_color=(0, aggregated_data['Complaints'].max()),
                    labels={'Complaints':'Number of Complaints'})

fig.update_geos(fitbounds="locations", visible=False)
fig.show()
```

```python
df['YearMonth'] = pd.to_datetime(df['Created Date']).dt.to_period('M')
complaints_by_location_time = df.groupby(['YearMonth', 'Location Type']).size().unstack(fill_value=0)
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from IPython.display import HTML

# Setting up the figure and axis for the animation
fig, ax = plt.subplots(figsize=(10, 6))

def animate(month):
    ax.clear()  # Clear the previous bar chart
    data = complaints_by_location_time.iloc[month]  # Get data for the current month
    data.plot(kind='bar', ax=ax, color='tab:blue')
    ax.set_title('Rodent Complaints by Location Type: ' + str(complaints_by_location_time.index[month]))
    ax.set_ylabel('Number of Complaints')
    ax.set_xlabel('Location Type')
    plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability

# Creating the animation
ani = animation.FuncAnimation(fig, animate, frames=len(complaints_by_location_time), interval=500, repeat=False)

# Displaying the animation in the notebook
HTML(ani.to_jshtml())

```

```python
# Replace NaNs with a default location 
default_latitude = 40.7128
default_longitude = -74.0060
df['Latitude'].fillna(default_latitude, inplace=True)
df['Longitude'].fillna(default_longitude, inplace=True)
```

```python
import folium

# Create a map centered around an average location in NYC
nyc_map = folium.Map(location=[40.7128, -74.0060], zoom_start=11)

for idx, row in df.iterrows():
    folium.Marker(
        location=[row['Latitude'], row['Longitude']],
        popup=f"Location Type: {row['Location Type']}<br>Date: {row['Created Date']}",
        icon=folium.Icon(color='blue' if row['Location Type'] == 'Residential' else 'red')
    ).add_to(nyc_map)

# Display the map
nyc_map

```

