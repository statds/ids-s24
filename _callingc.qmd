## Calling C/C++ from Python

This section was written by Madison Woo 

### Introduction

Hello! My name is Madison Woo and I am a junior majoring in statistical 
data science with a mathematics minor. I have a good understanding of multiple 
coding languages and I think it is important to learn how different coding 
languages can be integrated. Today, I am going to be talking about how to call 
C/C++ from python. 

### Presentation Disclaimer

In order to follow along with the code in this presentation, you will need 
to compile the C/C++ files located in the 'extra files' folder. 

### Overview of C/C++ 

- C is a general purpose programming language designed for systems programming.

- C is a procedural programming language known for its simplicity and 
efficiency, while C++ extends C with features for object-oriented programming, 
providing higher-level abstractions and greater flexibility in software design.

- The basic syntax and code structure of both C and C++ are the same. 

- Memory usage in C/C++ is key. 

```{python}
"""
Python Syntax:
if a >=0: 
    b = c + a
    d = d + 5
else:
    b = c - a
    d = d + 10

C Syntax:
if (a >= 0) {
    b = c + a;
    d = d + 5;
}
else {
    b = c – a;
    d = d + 10;
}
"""
```

#### How set it up (on VS code)

- Need to install a C/C++ extension.  

- Need to install a C/C++ compiler. 
    * MinGW for Windows 
    * Clang for MacOS 
    * GCC for Linux 

    Run in C/C++ compiler terminal: 
    "pacman -S --needed base-devel mingw-w64-ucrt-x86_64-toolchain"

    Press enter to install default number of packages, then enter Y
    to proceed with the installation. 

    You must adjust the file path on your computer

    Create a .c file for C or .cpp file for C++. 

    In the .cpp file, there is an option to "Run C/C++ File" with a play button.
    Once you press that button, a list of compilers will pop up. Select
    C/C++: g++.exe build and debug active file. You only have to do this the 
    first time you run a .cpp file. From there, your code should successfully run
    and an integrated terminal will appear.

### Why would you need to call C/C++ from Python?

- C/C++ has a faster execution speed.

- Useful for large scale testing on C/C++ programming. 

- You might have an existing file written in C/C++ that you can use. 

```{python}
# presentation.cpp file code 

"""
#include <iostream>

extern "C" {
    void cpp_loop(long long& sum) {
        for (int i = 0; i < 1000000; ++i) {
            sum += i;
        }
    }
}
"""
```

```{python}
import time
import os

# Compile the C++ file
os.system('g++ presentation.cpp -o presentation_cpp')

# Time the execution of the C++ program
start_time_cpp = time.time()
os.system('./presentation_cpp > output.txt')
end_time_cpp = time.time()

# Read the output file
with open('output.txt', 'r') as file:
    output = file.read()

print("Runtime using C++:", (end_time_cpp - start_time_cpp) * 1000, "milliseconds")
```

```{python}
import time

def python_loop():
    # Measure the start time
    start_time = time.time()

    # Perform a simple loop to compute the sum
    sum_value = 0
    for i in range(1000000):
        sum_value += i

    # Measure the end time
    end_time = time.time()

    # Calculate the duration
    duration = (end_time - start_time) * 1000  

    # Output execution time
    print("Python loop execution time:", duration, "milliseconds")

# Calling the function
python_loop()
```

### Overview Python Bindings 

Python bindings convert python to C/C++. There are several different methods 
that can do this. The common types of python bindings are ctypes, CFFI, 
PyBind11, and Cython.  

Since C and Python manage memory differently, you’ll need to be aware of where 
the memory for each object was allocated and make sure that it is freed on the
same side of the language barrier.

#### Marshalling Data Types 

In computer science, marshalling is the process of transforming the memory 
representation of an object to a data format suitable for storage or transmission. 
It is typically used when data must be moved between different parts of a computer
program or from one program to another.

Marshalling is what python bindings are doing when they prepare to move 
C/C++ to python and python to C/C++. Python bindings are necessary since each 
coding language stores data in different ways. 

- **Integers:** Python stores integers with arbitrary precision, meaning that
you can store very, very, large numbers. C specifies the exact sizes of integers. 
- **Floating-point Numbers:** Python can store much larger (and much smaller) 
floating-point numbers than C. 
- **Strings:** Strings are complicated when creating python bindings. Python and
C store strings in quite different formats (C and C++ differ in this as well).
Each type of python binding has a different way of dealing with strings 
- **Boolean:** Marshalling them is really straightforward since there are only 
two values. 

### ctypes 

A positive aspect of ctypes is that it is already part of the python standard 
library (added in version 2.5). You can import as you normally would with python 
packages. 

#### C

To create a shared libary enter:
"cc -fPIC -shared -o callingc.so calling_c.c"

```{python}
# calling_c.c file code 

"""
#include <stdio.h>

int square(int i) {
	return i * i;
}
"""
```

```{python}
from ctypes import * 

# Loading the shared library 
so_file = "./callingc.so"
calling_c = CDLL(so_file)

# Printing results 
print(calling_c.square(10))
```

#### C++

To create a shared library enter:
"g++ -shared -o mylibrary.so calling_c_plus.cpp" 

ctypes doesn't have any knowledge of the function unless you explicitly inform 
it. Any paramenters that aren't integers need to be specificed or else it will 
be assumed as an integer.

```{python}
from ctypes import CDLL, c_int

# Load the shared library
mylibrary = CDLL('./mylibrary.so')

# Declare the argument and return types for the function
mylibrary.square.argtypes = [c_int]
mylibrary.square.restype = c_int

# Call the add function
print(mylibrary.square(10))
```

### CFFI

To install CFFI:
"pip install cffi" 

You can import the cffi with "from cffi import FFI." You still need to have a 
shared libary in order to access the C++ code.  

Unlike ctypes, CFFI creates a new python module that can be loaded like other python
modules.

```{python}
from cffi import FFI

# Define the C code containing the declaration of the square function
c_code = """
    int square(int i);
"""

# Create a new FFI instance
ffi = FFI()

# Include the C code in the FFI instance
ffi.cdef(c_code)

# Load the shared library
mylib = ffi.dlopen('./mylibrary.so')  

# Call the square function
result = mylib.square(10)
print(result)
```

### Conclusion 

There are many other methods that you can use to call C/C++ from
python, but the focus here was on ctypes and CFFI. There are also
various strenghts and weaknesses for each method, which is something 
you might want to consider when you are implementing this into your
own code. 

Advantages and Disadvantages of ctypes: 
- Built into the standard library, requiring no extra steps to install.
- Compatible with shared libraries and dynamic link libraries.
- May not be compatible with more complex code because of the lack of
automation.  
- ctypes is older (created in 2003). 

Advantages and Disadvantages of  CFFI: 
- Generally runs faster than other methods. 
- Compatible with shared libraries and dynamic link libraries.
- Scales to larger projects. 
- Have to load a new python module. 

Selecting a method to call C/C++ is based off of preference, but 
if you are looking to make use of extensive foreign functions, CFFI 
is defintiely the way to go. If you have a simple C/C++ file you wish 
to minimize external dependencies, use ctypes to help with package 
fragility. 

### References 

https://realpython.com/python-bindings-overview/#python-bindings-overview
https://code.visualstudio.com/docs/languages/cpp
https://www.digitalocean.com/community/tutorials/calling-c-functions-from-python
